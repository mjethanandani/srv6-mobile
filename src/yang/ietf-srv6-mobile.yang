module ietf-srv6-mobile {
  yang-version "1.1";
  namespace "urn:ietf:params:xml:ns:yang:ietf-srv6-mobile";
  prefix "srv6-mob";

  import ietf-inet-types {
    prefix "inet";
    reference
      "RFC 6991: Common YANG Data Types.";
  }
  import ietf-network-instance {
    prefix ni;
    reference
      "RFC 8529: YANG Data Model for Network Intances.";
  }
  import ietf-routing {
    prefix rt;
    reference
      "RFC 8349, A YANG Data Model for Routing Management
       (NMDA Version).";
  }
  import ietf-routing-policy {
    prefix rt-pol;
    reference
      "RFC 9067: A YANG Data Model for Routing Policy.";
  }
  import ietf-bgp {
    prefix bgp;
    reference
      "I-D.ietf-idr-bgp-model: BGP Model for Service Provider 
       Network.";
  }
  import ietf-bgp-policy {
    prefix bp;
    reference
      "I-D.ietf-idr-bgp-model: BGP Model for Service Provider 
       Network.";
  }
  import ietf-segment-routing {
    prefix sr;
    reference
      "RFC 9020: YANG Data Model for Segment Routing.";
  }
  import ietf-srv6-base {
    prefix srv6;
    reference
      "I-D.ietf-spring-srv6-yang: YANG Data Model for SRv6 Base
       and Static.";
  }
  import ietf-srv6-types {
    prefix srv6-types;
    reference
      "RFC 9020: YANG Data Model for Segment Routing.";
  }

  organization
    "IETF IDR Working Group";

  contact
    "WG Web:   <https://datatracker.ietf.org/wg/idr/about>
     WG List:  <idr@ietf.org>

     Editor: Mahesh Jethanandani (mjethanandani at gmail dot com)
     Author:  Tetsuya Murakami (tetsuya at arrcus dot com)";

  description
    "This module augments the BGP YANG model to add support for
     configuration in mobile networks.

     Copyright (c) 2022 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Simplified BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX
     (https://www.rfc-editor.org/info/rfcXXXX); see the RFC itself
     for full legal notices.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
     'MAY', and 'OPTIONAL' in this document are to be interpreted as
     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
     they appear in all capitals, as shown here.";

  revision "YYYY-MM-DD" {
    description
      "Initial Version.";
    reference
      "RFC XXXX, A YANG Model for BGP configuration in mobile 
       networks.";
  }

 /*
  * Features
  */

  /*
   * Typedefs
   */
  typedef srv6-mobile-function-type {
    type union {
      type identityref {
        base "srv6-types:srv6-endpoint-type";
      }
      type uint16;
    }
    description
      "Type definition for SRV6 mobile function. Unknown
       values are represented as the numeric value.";
    reference
      "draft-ietf-dmm-srv6-mobile-uplane";
  }

  typedef ni-ref {
    type leafref {
      path "/ni:network-instances/ni:network-instance/ni:name";
    }
    description
      "This type is used by data models that need to reference a
       network instance.";
  }

  /*
   * Identities
   */
  identity mobile-interface-type {
    description
      "Base identity for different mobile interfaces.";
  }

  identity n4 {
    base mobile-interface-type;
    description
      "N4 interface.";
  }

  /*
   * Groupings
   */

  /* 
   * BGP configuration
   */
  augment "/rt:routing/rt:control-plane-protocols" +
          "/rt:control-plane-protocol/bgp:bgp/bgp:global" {

    description
      "Augmentation of the BGP global configuration to add srv6
       mobile configuration.";

    container srv6 {
      description
        "SRv6 mobile container.";

      leaf locator {
        type leafref {
          path "/rt:routing/sr:segment-routing/" +
               "srv6:srv6/srv6:locators/srv6:locator/srv6:name";    
        }
        description
          "Locator configuration.";
      }

      leaf sid-manager-connected {
        type boolean;
        config false;
        description
          "Connection with segment ID manager is active";
      }

      leaf locator-registered {
        type boolean;
        config false;
        description
          "Locator name is registered";
      }

      leaf micro-segment-enabled {
        type boolean;
        config false;
        description
          "Locator has enabled micro-segment behavior";
      }

      container mobile {
        description
	  "Mobile configuration.";

        container encapsulation {
	  description
            "Encapsulation configuration.";

          leaf locator {
            type leafref {
              path "/rt:routing/sr:segment-routing/" +
                   "srv6:srv6/srv6:locators/srv6:locator/srv6:name";
            }
            description
              "Reference to SRv6 locater key";
          }

          leaf function {
            type srv6-mobile-function-type;
            must "boolean(current()/../locator)" {
              error-message
		"SRv6 Mobile Locator name must be configured";
            }
	    description
	      "One of the SRv6 function types.";
          }

          leaf network-instance {
            type ni-ref;
            must "boolean(current()/../locator)" {
              error-message "SRv6 Mobile Locator name must be
                             configured";
            }
            description
              "Reference to network-instance";
          }

          leaf policy-color {
            type uint32;
            description
              "4 byte SRTE Policy Color";
          }

          leaf source-adress {
            type inet:ipv4-address;
	    description
              "GTP source IP address";
          }

	  leaf source-position {
            type uint8;
            description
              "Bit position of GTP source IP address";
          }

          container n4-network-instance {
            description
              "Definitions for the N4 interface.";

            leaf routing-policy {
              type leafref {
                path "/rt-pol:routing-policy/" +
		     "rt-pol:policy-definitions/" +
                     "rt-pol:policy-definition/rt-pol:name";
              }
              must "boolean(current()/../access)" {
                error-message
		  "SRv6 Mobile access instance name must be " +
                  "configured";
	      }
              description
                "Reference to routing-policy";
            }

            leaf access {
              type string;
              description
                "Mobile access instance.";
            }
          }
        }

        container decapsulations {
          description
            "SRv6 mobile decapsulation configuration.";

          list decapsulation {
            key "id";
            description
              "SRv6 mobile Decapsulation config";

            leaf id {
              type uint16;
              description
                "SRv6 mobile decapsulation entry id";
            }

            leaf locator {
              type leafref {
              path "/rt:routing/sr:segment-routing/" +
                   "srv6:srv6/srv6:locators/srv6:locator/srv6:name";
              }
              description
                "Reference to SRv6 locater key";
            }

            leaf function {
              type srv6-mobile-function-type;
              must "boolean(current()/../locator)" {
                error-message
		  "SRv6 Mobile Locator name must be configured";
              }
              description
                "One of SRv6 function types.";
            }

            leaf network-instance {
              type ni-ref;
              must "boolean(current()/../locator)" {
                error-message
		  "SRv6 Mobile Locator name must be configured";
              }
              description
                "Reference to network-instance";
            }

            leaf policy-color {
              type uint32;
              description
                "4 byte SRTE Policy Color";
            }

            container n4-network-instance {
              description
                "Definitions for the N4 interface.";

              leaf core {
                type string;
                description
                  "Core instance";
              }
            }
          }
        }
        leaf decapsulation-source-prefix {
          type inet:ipv6-prefix;
          description
            "IPv6 prefix for GTP source address";
        }
      }
    }
  }

  augment "/rt-pol:routing-policy/rt-pol:defined-sets" +
          "/bp:bgp-defined-sets" {
    description
      "Augmentation of the Routing Policy module to add
       mobile interface defined sets.";

    container interface-sets {
      description
        "Enclosing container for list of interface sets.";

      list interface-set {
        key "name";
        description
          "List of defined interface sets.";

        leaf name {
          type string;
          description
            "Name of interface set. This is used to reference
             the set in match conditions.";
        }

        leaf-list member {
          type identityref {
            base "mobile-interface-type";
          }
          description
            "Members of interface set.";
        }
      }
    }
  }

  augment "/rt-pol:routing-policy/rt-pol:policy-definitions" +
          "/rt-pol:policy-definition/rt-pol:statements" +
          "/rt-pol:statement/rt-pol:conditions/bp:bgp-conditions" {
    description
      "Augmentation of the Routing Policy module to add match
       conditions.";

    container match-network-interface-set {
      description
        "Match a referenced network instance.";
      leaf interface-set {
        type leafref {
          path "/rt-pol:routing-policy/rt-pol:defined-sets/"
             + "bp:bgp-defined-sets/interface-sets/"
             + "interface-set/name";
        }
        description
          "References a defined community set.";
      }
      uses rt-pol:match-set-options-group;
    }
  }
}
